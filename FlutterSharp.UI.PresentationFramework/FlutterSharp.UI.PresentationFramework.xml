<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlutterSharp.UI.PresentationFramework</name>
    </assembly>
    <members>
        <member name="T:FlutterSharp.UI.PresentationFramework.Application">
            <summary>
            Encapsulates a FlutterSharp application.
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Application.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlutterSharp.UI.PresentationFramework.Application"/> class.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Application.MainWindow">
            <summary>
            Gets or sets the main window of the application.
            </summary>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Canvas">
            <summary>
            Defines an area within which you can explicitly position child elements by using coordinates that are relative to the Canvas area.
            </summary>
            <seealso cref="T:FlutterSharp.UI.PresentationFramework.Panel" />
        </member>
        <member name="F:FlutterSharp.UI.PresentationFramework.Canvas.LeftProperty">
            <summary>
            Gets or sets a value that represents the distance between the left of an element and the left of its parent Canvas.
            </summary>
        </member>
        <member name="F:FlutterSharp.UI.PresentationFramework.Canvas.TopProperty">
            <summary>
            Gets or sets a value that represents the distance between the top of an element and the top of its parent Canvas.
            </summary>
        </member>
        <member name="F:FlutterSharp.UI.PresentationFramework.Canvas.RightProperty">
            <summary>
            Gets or sets a value that represents the distance between the right of an element and the right of its parent Canvas.
            </summary>
        </member>
        <member name="F:FlutterSharp.UI.PresentationFramework.Canvas.BottomProperty">
            <summary>
            Gets or sets a value that represents the distance between the bottom of an element and the bottom of its parent Canvas.
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Canvas.GetLeft(FlutterSharp.UI.PresentationFramework.DependencyObject)">
            <summary>
            Returns the value of the Left attached property for a given dependency object.
            </summary>
            <param name="element">The element from which the property value is read.</param>
            <returns>The Left coordinate of the specified element.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Canvas.SetLeft(FlutterSharp.UI.PresentationFramework.DependencyObject,System.Double)">
            <summary>
            Sets the value of the Left attached property for a given dependency object.
            </summary>
            <param name="element">The element to which the property value is written.</param>
            <param name="value">Sets the Left coordinate of the specified element.</param>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Canvas.GetTop(FlutterSharp.UI.PresentationFramework.FrameworkElement)">
            <summary>
            Returns the value of the Top attached property for a given dependency object.
            </summary>
            <param name="element">The element from which the property value is read.</param>
            <returns>The Top coordinate of the specified element.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Canvas.SetTop(FlutterSharp.UI.PresentationFramework.FrameworkElement,System.Double)">
            <summary>
            Sets the value of the Top attached property for a given dependency object.
            </summary>
            <param name="element">The element to which the property value is written.</param>
            <param name="value">Sets the Top coordinate of the specified element.</param>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Canvas.GetRight(FlutterSharp.UI.PresentationFramework.FrameworkElement)">
            <summary>
            Returns the value of the Right attached property for a given dependency object.
            </summary>
            <param name="element">The element from which the property value is read.</param>
            <returns>The Right coordinate of the specified element.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Canvas.SetRight(FlutterSharp.UI.PresentationFramework.FrameworkElement,System.Double)">
            <summary>
            Sets the value of the Right attached property for a given dependency object.
            </summary>
            <param name="element">The element to which the property value is written.</param>
            <param name="value">Sets the Right coordinate of the specified element.</param>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Canvas.GetBottom(FlutterSharp.UI.PresentationFramework.FrameworkElement)">
            <summary>
            Returns the value of the Bottom attached property for a given dependency object.
            </summary>
            <param name="element">The element from which the property value is read.</param>
            <returns>The Bottom coordinate of the specified element.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Canvas.SetBottom(FlutterSharp.UI.PresentationFramework.FrameworkElement,System.Double)">
            <summary>
            Sets the value of the Bottom attached property for a given dependency object.
            </summary>
            <param name="element">The element to which the property value is written.</param>
            <param name="value">Sets the Bottom coordinate of the specified element.</param>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Canvas.MeasureOverride(FlutterSharp.UI.Size)">
            <summary>
            Measures the override.
            </summary>
            <param name="availableSize">Size of the available.</param>
            <returns></returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Canvas.ArrangeOverride(FlutterSharp.UI.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a FrameworkElement derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>
            The actual size used.
            </returns>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.ContentControl">
            <summary>
            Represents a control with a single piece of content of any type.
            </summary>
            <seealso cref="T:FlutterSharp.UI.PresentationFramework.FrameworkElement" />
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.ContentControl.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.ContentControl.MeasureCore(FlutterSharp.UI.Size)">
            <summary>
            When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.
            </summary>
            <param name="availableSize">The available size that the parent element can allocate for the child.</param>
            <returns>
            The desired size of this element in layout.
            </returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.ContentControl.ArrangeOverride(FlutterSharp.UI.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a FrameworkElement derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>
            The actual size used.
            </returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.ContentControl.Draw(FlutterSharp.UI.Canvas)">
            <summary>
            Draws this component on the specified canvas.
            </summary>
            <param name="canvas">The canvas.</param>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.DependencyObject">
            <summary>
            Represents an object that participates in the dependency property system.
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.DependencyObject.GetValue(FlutterSharp.UI.PresentationFramework.DependencyProperty)">
             <summary>
            Returns the current effective value of a dependency property on this instance of a <see cref="T:FlutterSharp.UI.PresentationFramework.DependencyObject"/>.
             </summary>
             <param name="property">The dependency property.</param>
             <returns>The value.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.DependencyObject.SetValue(FlutterSharp.UI.PresentationFramework.DependencyProperty,System.Object)">
            <summary>
            Sets the local value of a dependency property.
            </summary>
            <param name="property">The dependency property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.DependencyProperty">
            <summary>
            Base class to declare dependency property
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.DependencyProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.DependencyProperty.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:FlutterSharp.UI.PresentationFramework.DependencyProperty"/> class.
            </summary>
            <param name="defaultValue">Default value for this property.</param>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Extensions.FlutterPathExtensions">
            <summary>
            Extensions for <see cref="T:FlutterSharp.UI.Path"/> class
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Extensions.FlutterPathExtensions.MoveToEx(FlutterSharp.UI.Path,System.Double,System.Double)">
            <summary>
            Moves to x, y point without drawing path.
            </summary>
            <param name="path">The source path.</param>
            <param name="x">The x coordinate of point to move to.</param>
            <param name="y">The y coordinate of point to move to.</param>
            <returns>The source path.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Extensions.FlutterPathExtensions.MoveToEx(FlutterSharp.UI.Path,FlutterSharp.UI.PresentationFramework.Point)">
            <summary>
            Moves to point without drawing path.
            </summary>
            <param name="path">The source path.</param>
            <param name="point">The point to move to.</param>
            <returns>The source path.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Extensions.FlutterPathExtensions.RelativeMoveToEx(FlutterSharp.UI.Path,System.Double,System.Double)">
            <summary>
            Starts a new sub-path at the given offset from the current point.
            </summary>
            <param name="path">The source path.</param>
            <param name="x">The dx.</param>
            <param name="y">The dy.</param>
            <returns>The source path.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Extensions.FlutterPathExtensions.RelativeMoveToEx(FlutterSharp.UI.Path,FlutterSharp.UI.Offset)">
            <summary>
            Starts a new sub-path at the given offset from the current point.
            </summary>
            <param name="path">The source path.</param>
            <param name="offset">The relative offset to apply.</param>
            <returns>The source path.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Extensions.FlutterPathExtensions.LineToEx(FlutterSharp.UI.Path,System.Double,System.Double)">
            <summary>
            Adds a straight line segment from the current point to the given point.
            </summary>
            <param name="path">The source path.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The source path.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Extensions.FlutterPathExtensions.LineToEx(FlutterSharp.UI.Path,FlutterSharp.UI.PresentationFramework.Point)">
            <summary>
            Adds a straight line segment from the current point to the given point.
            </summary>
            <param name="path">The source path.</param>
            <param name="point">The end point of the line.</param>
            <returns>The source path.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Extensions.FlutterPathExtensions.RelativeLineToEx(FlutterSharp.UI.Path,System.Double,System.Double)">
            <summary>
            Adds a straight line segment from the current point to the point at the given offset from the current point.
            </summary>
            <param name="path">The source path.</param>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
            <returns>The source path.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Extensions.FlutterPathExtensions.RelativeLineToEx(FlutterSharp.UI.Path,FlutterSharp.UI.Offset)">
            <summary>
            Adds a straight line segment from the current point to the point at the given offset from the current point.
            </summary>
            <param name="path">The source path.</param>
            <param name="offset">The relative offset to apply.</param>
            <returns>The source path.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Extensions.FlutterPathExtensions.ArcToPointEx(FlutterSharp.UI.Path,FlutterSharp.UI.Offset,FlutterSharp.UI.Radius,System.Double,System.Boolean,System.Boolean)">
             <summary>
             Appends up to four conic curves weighted to describe an oval of `radius`
             and rotated by `rotation`.
            
             The first curve begins from the last point in the path and the last ends
             at `arcEnd`. The curves follow a path in a direction determined by
             `clockwise` and `largeArc` in such a way that the sweep angle
             is always less than 360 degrees.
            
             A simple line is appended if either either radii are zero or the last
             point in the path is `arcEnd`. The radii are scaled to fit the last path
             point if both are greater than zero but too small to describe an arc.
             </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Extensions.FlutterPathExtensions.RelativeArcToPointEx(FlutterSharp.UI.Path,FlutterSharp.UI.Offset,FlutterSharp.UI.Radius,System.Double,System.Boolean,System.Boolean)">
             <summary>
             Appends up to four conic curves weighted to describe an oval of `radius`
             and rotated by `rotation`.
            
             The last path point is described by (px, py).
            
             The first curve begins from the last point in the path and the last ends
             at `arcEndDelta.dx + px` and `arcEndDelta.dy + py`. The curves follow a
             path in a direction determined by `clockwise` and `largeArc`
             in such a way that the sweep angle is always less than 360 degrees.
            
             A simple line is appended if either either radii are zero, or, both
             `arcEndDelta.dx` and `arcEndDelta.dy` are zero. The radii are scaled to
             fit the last path point if both are greater than zero but too small to
             describe an arc.
             </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Extensions.FlutterPathExtensions.CloseEx(FlutterSharp.UI.Path)">
            <summary>
            Closes the last sub-path, as if a straight line had been drawn
            from the current point to the first point of the sub-path.
            </summary>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.FrameworkElement">
            <summary>
            <see cref="T:FlutterSharp.UI.PresentationFramework.FrameworkElement"/> is a base class for FlutterSharp core level implementations building on FlutterSharp elements and basic presentation characteristics.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.FrameworkElement.X">
            <summary>
            Get the X top left coordinate on window
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.FrameworkElement.Y">
            <summary>
            Get the Y top left coordinate on window
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.FrameworkElement.ActualWidth">
            <summary>
            Gets the rendered width of this element.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.FrameworkElement.ActualHeight">
            <summary>
            Gets the rendered height of this element.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.FrameworkElement.Width">
            <summary>
            Gets or sets the width of the element.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.FrameworkElement.Height">
            <summary>
            Gets or sets the height of the element.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.FrameworkElement.Background">
            <summary>
            Gets or sets a brush that describes the background of a control.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.FrameworkElement.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.FrameworkElement.DesiredSize">
            <summary>
            Gets the size that this element computed during the measure pass of the layout process.
            </summary>
            <value>
            The computed size, which becomes the desired size for the arrange pass.
            </value>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.FrameworkElement.Load">
            <summary>
            Call when this instance is initialized
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.FrameworkElement.Measure(FlutterSharp.UI.Size)">
            <summary>
            Updates the DesiredSize of a UIElement. Parent elements call this method from their own MeasureCore(Size) implementations to form a recursive layout update. Calling this method constitutes the first pass (the "Measure" pass) of a layout update.
            </summary>
            <param name="availableSize">The available space that a parent element can allocate a child element. A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.</param>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.FrameworkElement.MeasureCore(FlutterSharp.UI.Size)">
            <summary>
            When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.
            </summary>
            <param name="availableSize">The available size that the parent element can allocate for the child.</param>
            <returns>The desired size of this element in layout.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.FrameworkElement.Arrange(FlutterSharp.UI.Rect)">
            <summary>
            Positions child elements and determines a size for a UIElement. Parent elements call this method from their ArrangeCore(Rect) implementation to form a recursive layout update. This method constitutes the second pass of a layout update.
            </summary>
            <param name="finalRect">The final rect.</param>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.FrameworkElement.ArrangeCore(FlutterSharp.UI.Rect)">
            <summary>
            Defines the template for core-level arrange layout definition.
            </summary>
            <param name="finalRect">The final area within the parent that element should use to arrange itself and its child elements.</param>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.FrameworkElement.ArrangeOverride(FlutterSharp.UI.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a FrameworkElement derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.FrameworkElement.Draw(FlutterSharp.UI.Canvas)">
            <summary>
            Draws this component on the specified canvas.
            </summary>
            <param name="canvas">The canvas.</param>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Media.Brush">
            <summary>
            Defines objects used to paint graphical objects. Classes that derive from <see cref="T:FlutterSharp.UI.PresentationFramework.Media.Brush"/> describe how the area is painted.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.Brush.Opacity">
            <summary>
            Gets or sets the degree of opacity of a Brush.
            </summary>
            <value>
            The value of the Opacity property is expressed as a value between 0.0 and 1.0. The default value is 1.0.
            </value>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.Brush.ToPaint">
            <summary>
            Converts the <see cref="T:FlutterSharp.UI.PresentationFramework.Media.Brush"/> to flutter <see cref="T:FlutterSharp.UI.Paint"/> object.
            </summary>
            <returns>The <see cref="T:FlutterSharp.UI.Paint"/> used to draw the <see cref="T:FlutterSharp.UI.PresentationFramework.Media.Brush"/></returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.Brush.ApplyOpacity(FlutterSharp.UI.Color)">
            <summary>
            Applies the <see cref="P:FlutterSharp.UI.PresentationFramework.Media.Brush.Opacity"/> to the color <paramref name="from"/>.
            </summary>
            <param name="from">The color to apply <see cref="P:FlutterSharp.UI.PresentationFramework.Media.Brush.Opacity"/>.</param>
            <returns>The color with opacity</returns>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Media.Brushes">
            <summary>
            Implements a set of predefined SolidColorBrush objects.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.Brushes.Transparent">
            <summary>
            Gets the solid fill color that has a hexadecimal value of #00FFFFFF.
            </summary>
            <value>
            A solid fill color.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.Brushes.Red">
            <summary>
            Gets the solid fill color that has a hexadecimal value of #FFFF0000.
            </summary>
            <value>
            A solid fill color.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.Brushes.Green">
            <summary>
            Gets the solid fill color that has a hexadecimal value of #FF00FF00.
            </summary>
            <value>
            A solid fill color.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.Brushes.Blue">
            <summary>
            Gets the solid fill color that has a hexadecimal value of #FF0000FF.
            </summary>
            <value>
            A solid fill color.
            </value>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Media.Colors">
            <summary>
            Implements a set of predefined colors.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.Colors.Transparent">
            <summary>
            Gets the system-defined color that has an ARGB value of #00FFFFFF.
            </summary>
            <value>
            Represents colors in terms of alpha, red, green, and blue channels.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.Colors.Red">
            <summary>
            Gets the system-defined color that has an ARGB value of #FFFF0000.
            </summary>
            <value>
            Represents colors in terms of alpha, red, green, and blue channels.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.Colors.Green">
            <summary>
            Gets the system-defined color that has an ARGB value of #FF00FF00.
            </summary>
            <value>
            Represents colors in terms of alpha, red, green, and blue channels.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.Colors.Blue">
            <summary>
            Gets the system-defined color that has an ARGB value of #FF0000FF.
            </summary>
            <value>
            Represents colors in terms of alpha, red, green, and blue channels.
            </value>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Media.CornerRadius">
            <summary>
            Define a corner radius with X and Y radius
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.CornerRadius.#ctor(System.Double,System.Double)">
            <summary>
            Define the corner radius with X and Y radius
            </summary>
            <param name="radiusX">X radius</param>
            <param name="radiusY">Y radius</param>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.CornerRadius.Zero">
            <summary>
            Get a X=0, Y=0 corner radius
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.CornerRadius.RadiusX">
            <summary>
            Get or set the X radius
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.CornerRadius.RadiusY">
            <summary>
            Get or set the Y radius
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.CornerRadius.op_Equality(FlutterSharp.UI.PresentationFramework.Media.CornerRadius,FlutterSharp.UI.PresentationFramework.Media.CornerRadius)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.CornerRadius.op_Inequality(FlutterSharp.UI.PresentationFramework.Media.CornerRadius,FlutterSharp.UI.PresentationFramework.Media.CornerRadius)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.CornerRadius.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.CornerRadius.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Media.CornerRadiusExpression">
            <summary>
            Tranform a corner radius string expression to rectangle corner radius
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.CornerRadiusExpression.#ctor(System.String)">
            <summary>
            Create an expression with <paramref name="data"/> input
            </summary>
            <param name="data">Input expression</param>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.CornerRadiusExpression.TopLeft">
            <summary>
            Get the top left CornerRadius from string expression
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.CornerRadiusExpression.TopRight">
            <summary>
            Get the top right CornerRadius from string expression
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.CornerRadiusExpression.BottomRight">
            <summary>
            Get the bottom right CornerRadius from string expression
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.CornerRadiusExpression.BottomLeft">
            <summary>
            Get the bottom left CornerRadius from string expression
            </summary>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Media.Geometry">
            <summary>
            Classes that derive from this abstract base class define geometric shapes. Geometry objects can be used for clipping, hit-testing, and rendering 2-D graphic data.
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.Geometry.ToPath(FlutterSharp.UI.Offset,FlutterSharp.UI.Size)">
            <summary>
            Converts the geometry to flutter path.
            </summary>
            <param name="offset">The offset to apply to path vertices.</param>
            <param name="drawSize">Size of the draw.</param>
            <returns>The flutter path</returns>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Media.GradientBrush">
            <summary>
            An abstract class that describes a gradient, composed of gradient stops. Classes that inherit from <see cref="T:FlutterSharp.UI.PresentationFramework.Media.GradientBrush"/> describe different ways of interpreting gradient stops.
            </summary>
            <seealso cref="T:FlutterSharp.UI.PresentationFramework.Media.Brush" />
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.GradientBrush.GradientStops">
             <summary>
            Gets or sets the brush's gradient stops.
             </summary>
             <value>
             A collection of the <seealso cref="T:FlutterSharp.UI.PresentationFramework.Media.GradientStop"/> objects associated with the brush, each of which specifies a color and an offset along the brush's gradient axis. The default is an empty gradient stop collection.
             </value>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.GradientBrush.GradientStopsToFluttersLists">
            <summary>
            Transforms the <see cref="T:FlutterSharp.UI.Gradient"/> collection into separate lists of colors and offsets for flutter's <see cref="T:FlutterSharp.UI.Gradient"/> class.
            </summary>
            <returns>List of colors and list of offsets</returns>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Media.GradientStop">
            <summary>
            Describes the location and color of a transition point in a gradient.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.GradientStop.Color">
            <summary>
            Gets or sets the color of the gradient stop.
            </summary>
            <value>
            The color of the gradient stop. The default value is <seealso cref="P:FlutterSharp.UI.PresentationFramework.Media.Colors.Transparent"/>.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.GradientStop.Offset">
            <summary>
            Gets the location of the gradient stop within the gradient vector.
            </summary>
            <value>
            The relative location of this gradient stop along the gradient vector. The default value is 0.0.
            </value>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Media.LinearGradientBrush">
            <summary>
            Paints an area with a linear gradient.
            </summary>
            <seealso cref="T:FlutterSharp.UI.PresentationFramework.Media.GradientBrush" />
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.LinearGradientBrush.StartPoint">
            <summary>
            Gets or sets the starting two-dimensional coordinates of the linear gradient.
            </summary>
            <value>
            The starting two-dimensional coordinates of the linear gradient. The default is (0,0).
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.LinearGradientBrush.EndPoint">
            <summary>
            Gets or sets the ending two-dimensional coordinates of the linear gradient.
            </summary>
            <value>
            The ending two-dimensional coordinates of the linear gradient. The default is (1,1).
            </value>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.LinearGradientBrush.ToPaint">
            <summary>
            Converts the <see cref="T:FlutterSharp.UI.PresentationFramework.Media.Brush"/> to flutter <see cref="T:FlutterSharp.UI.Paint"/> object.
            </summary>
            <returns>The <see cref="T:FlutterSharp.UI.Paint"/> used to draw the <see cref="T:FlutterSharp.UI.PresentationFramework.Media.Brush"/></returns>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Media.RectangleGeometry">
            <summary>
            Describes a two-dimensional rectangle.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.RectangleGeometry.TopLeftCornerRadius">
            <summary>
            Get or set the top left corner radius
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.RectangleGeometry.TopRightCornerRadius">
            <summary>
            Get or set the top right corner radius
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.RectangleGeometry.BottomRightCornerRadius">
            <summary>
            Get or set the bottom right corner radius
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.RectangleGeometry.BottomLeftCornerRadius">
            <summary>
            Get or set the bottom left corner radius
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.RectangleGeometry.SetCornerRadiusExpression(System.String)">
            <summary>
            Set the corner radius definition for all corners by a <see cref="T:FlutterSharp.UI.PresentationFramework.Media.CornerRadiusExpression"/>.
            Values can be :
            "5" // Set all corners to x and y radius to 5
            "tl5" // Set tl (Top Left) corner to x and y to 5
            "tl5,6 br10,8" // Set tl (Top Left) corner to x 5 and y 6 and br (Bottom Right) to x 10 and y 8
            ...
            </summary>
            <param name="stringExpression">Expression to interpret</param>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.RectangleGeometry.ToPath(FlutterSharp.UI.Offset,FlutterSharp.UI.Size)">
            <summary>
            Converts to path.
            </summary>
            <param name="offset">The offset to apply to path vertices.</param>
            <param name="drawSize">Size of the draw.</param>
            <returns>
            The flutter path
            </returns>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Media.SolidColorBrush">
            <summary>
            Paints an area with a solid color.
            </summary>
            <seealso cref="T:FlutterSharp.UI.PresentationFramework.Media.Brush" />
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Media.SolidColorBrush.Color">
            <summary>
            Gets or sets the color of this SolidColorBrush.
            </summary>
            <value>
            The brush's color. The default value is Transparent.
            </value>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Media.SolidColorBrush.ToPaint">
            <summary>
            Converts the <see cref="T:FlutterSharp.UI.PresentationFramework.Media.Brush"/> to flutter <see cref="T:FlutterSharp.UI.Paint"/> object.
            </summary>
            <returns>The <see cref="T:FlutterSharp.UI.Paint"/> used to draw the <see cref="T:FlutterSharp.UI.PresentationFramework.Media.Brush"/></returns>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Panel">
            <summary>
            Provides a base class for all Panel elements. Use Panel elements to position and arrange child objects in flutter sharp applications.
            </summary>
            <seealso cref="T:FlutterSharp.UI.PresentationFramework.FrameworkElement" />
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Panel.Children">
            <summary>
            Gets a UIElementCollection of child elements of this Panel.
            </summary>
            <value>
            A UIElementCollection. The default is an empty UIElementCollection.
            </value>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Panel.MeasureCore(FlutterSharp.UI.Size)">
            <summary>
            When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.
            </summary>
            <param name="availableSize">The available size that the parent element can allocate for the child.</param>
            <returns>
            The desired size of this element in layout.
            </returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Panel.MeasureOverride(FlutterSharp.UI.Size)">
            <summary>
            Measures the override.
            </summary>
            <param name="availableSize">Size of the available.</param>
            <returns></returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Panel.Draw(FlutterSharp.UI.Canvas)">
            <summary>
            Draws this component on the specified canvas.
            </summary>
            <param name="canvas">The canvas.</param>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Point">
            <summary>
            Represents an x- and y-coordinate pair in two-dimensional space.
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Point.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:FlutterSharp.UI.PresentationFramework.Point"/> structure that contains the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the new <see cref="T:FlutterSharp.UI.PresentationFramework.Point"/> structure.</param>
            <param name="y">The y-coordinate of the new <see cref="T:FlutterSharp.UI.PresentationFramework.Point"/> structure.</param>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Point.X">
            <summary>
            Gets or sets the X-coordinate value of this <see cref="T:FlutterSharp.UI.PresentationFramework.Point"/> structure.
            </summary>
            <value>
            The X-coordinate value of this <see cref="T:FlutterSharp.UI.PresentationFramework.Point"/> structure. The default value is 0.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Point.Y">
            <summary>
            Gets or sets the Y-coordinate value of this <see cref="T:FlutterSharp.UI.PresentationFramework.Point"/> structure.
            </summary>
            <value>
            The Y-coordinate value of this <see cref="T:FlutterSharp.UI.PresentationFramework.Point"/> structure. The default value is 0.
            </value>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Point.op_Equality(FlutterSharp.UI.PresentationFramework.Point,FlutterSharp.UI.PresentationFramework.Point)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Point.op_Inequality(FlutterSharp.UI.PresentationFramework.Point,FlutterSharp.UI.PresentationFramework.Point)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Point.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Shapes.Rectangle">
            <summary>
            Draws a rectangle.
            </summary>
            <seealso cref="T:FlutterSharp.UI.PresentationFramework.Shapes.Shape" />
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Shapes.Rectangle.TopLeftCornerRadius">
            <summary>
            Get or set the top left corner radius
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Shapes.Rectangle.TopRightCornerRadius">
            <summary>
            Get or set the top right corner radius
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Shapes.Rectangle.BottomRightCornerRadius">
            <summary>
            Get or set the bottom right corner radius
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Shapes.Rectangle.BottomLeftCornerRadius">
            <summary>
            Get or set the bottom left corner radius
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Shapes.Rectangle.SetCornerRadiusExpression(System.String)">
            <summary>
            Set the corner radius definition for all corners by a <see cref="T:FlutterSharp.UI.PresentationFramework.Media.CornerRadiusExpression"/>.
            Values can be :
            "5" // Set all corners to x and y radius to 5
            "tl5" // Set tl (Top Left) corner to x and y to 5
            "tl5,6 br10,8" // Set tl (Top Left) corner to x 5 and y 6 and br (Bottom Right) to x 10 and y 8
            ...
            </summary>
            <param name="stringExpression">Expression to interpret</param>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Shapes.Rectangle.DefiningGeometry">
            <summary>
            Gets a value that represents the <see cref="T:FlutterSharp.UI.PresentationFramework.Media.Geometry" /> of the <see cref="T:FlutterSharp.UI.PresentationFramework.Shapes.Shape" />.
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Shapes.Rectangle.Draw(FlutterSharp.UI.Canvas)">
            <summary>
            Draws this component on the specified canvas.
            </summary>
            <param name="canvas">The canvas.</param>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Shapes.Shape">
            <summary>
            Provides a base class for shape elements, such as Ellipse, Polygon, and Rectangle.
            </summary>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Shapes.Shape.Stroke">
            <summary>
            Gets or sets the <see cref="T:FlutterSharp.UI.Color"/> that specifies how the <see cref="T:FlutterSharp.UI.PresentationFramework.Shapes.Shape"/> outline is painted.
            </summary>
            <value>
            A <see cref="T:FlutterSharp.UI.Color"/> that specifies how the <see cref="T:FlutterSharp.UI.PresentationFramework.Shapes.Shape"/> outline is painted. The default is null.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Shapes.Shape.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value>
            The stroke thickness.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Shapes.Shape.StrokeDashCap">
            <summary>
            Gets or sets a <see cref="T:FlutterSharp.UI.StrokeCap"/> enumeration value that specifies how the ends of a dash are drawn.
            </summary>
            <value>
            One of the enumeration values for <see cref="T:FlutterSharp.UI.StrokeCap"/>. The default is Butt.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Shapes.Shape.StrokeLineJoin">
            <summary>
            Gets or sets a <see cref="T:FlutterSharp.UI.StrokeJoin"/> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:FlutterSharp.UI.PresentationFramework.Shapes.Shape"/>.
            </summary>
            <value>
            One of the enumeration values for <see cref="T:FlutterSharp.UI.StrokeJoin"/>
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Shapes.Shape.StrokeMiterLimit">
            <summary>
            Gets or sets a limit on the ratio of the miter length to half the <see cref="P:FlutterSharp.UI.PresentationFramework.Shapes.Shape.StrokeThickness"/> of a <see cref="T:FlutterSharp.UI.PresentationFramework.Shapes.Shape"/> element.
            </summary>
            <value>
            The limit on the ratio of the miter length to the <see cref="P:FlutterSharp.UI.PresentationFramework.Shapes.Shape.StrokeThickness"/> of a <see cref="T:FlutterSharp.UI.PresentationFramework.Shapes.Shape"/> element. This value is always a positive number that is greater than or equal to 1.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Shapes.Shape.DefiningGeometry">
            <summary>
            Gets a value that represents the <see cref="T:FlutterSharp.UI.PresentationFramework.Media.Geometry"/> of the <see cref="T:FlutterSharp.UI.PresentationFramework.Shapes.Shape"/>.
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Shapes.Shape.Draw(FlutterSharp.UI.Canvas)">
            <summary>
            Draws this component on the specified canvas.
            </summary>
            <param name="canvas">The canvas.</param>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Thickness">
            <summary>
            Describes the thickness of a frame around a rectangle. Four Double values describe the Left, Top, Right, and Bottom sides of the rectangle, respectively.
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Thickness.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FlutterSharp.UI.PresentationFramework.Thickness"/> structure that has the specified uniform length on each side.
            </summary>
            <param name="uniformLength">The uniform length applied to all four sides of the bounding rectangle.</param>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Thickness.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FlutterSharp.UI.PresentationFramework.Thickness"/> structure that has specific lengths (supplied as a Double) applied to each side of the rectangle.
            </summary>
            <param name="leftRight">The thickness for the left and right side of the rectangle.</param>
            <param name="topBottom">The thickness for the upper and lower side of the rectangle.</param>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FlutterSharp.UI.PresentationFramework.Thickness"/> structure that has specific lengths (supplied as a Double) applied to each side of the rectangle.
            </summary>
            <param name="left">The thickness for the left side of the rectangle.</param>
            <param name="top">The thickness for the upper side of the rectangle.</param>
            <param name="right">The thickness for the right side of the rectangle.</param>
            <param name="bottom">The thickness for the lower side of the rectangle.</param>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Thickness.Left">
            <summary>
            A Double that represents the width of the left side of the bounding rectangle for this instance of <see cref="T:FlutterSharp.UI.PresentationFramework.Thickness"/>.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Thickness.Top">
            <summary>
            A Double that represents the width of the upper side of the bounding rectangle for this instance of <see cref="T:FlutterSharp.UI.PresentationFramework.Thickness"/>.
            </summary>
            <value>
            The top.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Thickness.Right">
            <summary>
            A Double that represents the width of the right side of the bounding rectangle for this instance of <see cref="T:FlutterSharp.UI.PresentationFramework.Thickness"/>.
            </summary>
            <value>
            The right.
            </value>
        </member>
        <member name="P:FlutterSharp.UI.PresentationFramework.Thickness.Bottom">
            <summary>
            A Double that represents the width of the lower side of the bounding rectangle for this instance of <see cref="T:FlutterSharp.UI.PresentationFramework.Thickness"/>.
            </summary>
            <value>
            The bottom.
            </value>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Thickness.Equals(FlutterSharp.UI.PresentationFramework.Thickness)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Thickness.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:FlutterSharp.UI.PresentationFramework.Thickness" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.Thickness.GetHashCode">
            <summary>
            Returns a hash code for the structure.
            </summary>
            <returns>
            A hash code for this instance of <see cref="T:FlutterSharp.UI.PresentationFramework.Thickness"/>.
            </returns>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.WeakReferenceList`1">
            <summary>
            Manage a list of weak references.
            </summary>
            <typeparam name="T">Type of collection element</typeparam>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.WeakReferenceList`1.Add(`0)">
            <summary>
            Add a new weak reference on <paramref name="instance"/>
            </summary>
            <param name="instance">Instance to add</param>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.WeakReferenceList`1.Clean">
            <summary>
            Clean all non alive weak reference
            </summary>
        </member>
        <member name="M:FlutterSharp.UI.PresentationFramework.WeakReferenceList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:FlutterSharp.UI.PresentationFramework.Window">
            <summary>
            Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.
            </summary>
        </member>
    </members>
</doc>
