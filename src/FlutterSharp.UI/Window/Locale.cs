using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using static FlutterSharp.UI.UITypes;

namespace FlutterSharp.UI
{
    /// An identifier used to select a user's language and formatting preferences.
    ///
    /// This represents a [Unicode Language
    /// Identifier](https://www.unicode.org/reports/tr35/#Unicode_language_identifier)
    /// (i.e. without Locale extensions), except variants are not supported.
    ///
    /// Locales are canonicalized according to the "preferred value" entries in the
    /// [IANA Language Subtag
    /// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
    /// For example, `const Locale('he')` and `const Locale('iw')` are equal and
    /// both have the [languageCode] `he`, because `iw` is a deprecated language
    /// subtag that was replaced by the subtag `he`.
    ///
    /// See also:
    ///
    ///  * [Window.locale], which specifies the system's currently selected
    ///    [Locale].
    public class Locale
    {
        private readonly string _languageCode;
        private readonly string _countryCode;

        /// Creates a new Locale object. The first argument is the
        /// primary language subtag, the second is the region (also
        /// referred to as 'country') subtag.
        ///
        /// For example:
        ///
        /// ```dart
        /// const Locale swissFrench = Locale('fr', 'CH');
        /// const Locale canadianFrench = Locale('fr', 'CA');
        /// ```
        ///
        /// The primary language subtag must not be null. The region subtag is
        /// optional. When there is no region/country subtag, the parameter should
        /// be omitted or passed `null` instead of an empty-string.
        ///
        /// The subtag values are _case sensitive_ and must be one of the valid
        /// subtags according to CLDR supplemental data:
        /// [language](http://unicode.org/cldr/latest/common/validity/language.xml),
        /// [region](http://unicode.org/cldr/latest/common/validity/region.xml). The
        /// primary language subtag must be at least two and at most eight lowercase
        /// letters, but not four letters. The region region subtag must be two
        /// uppercase letters or three digits. See the [Unicode Language
        /// Identifier](https://www.unicode.org/reports/tr35/#Unicode_language_identifier)
        /// specification.
        ///
        /// Validity is not checked by default, but some methods may throw away
        /// invalid data.
        ///
        /// See also:
        ///
        ///  * [Locale.fromSubtags], which also allows a [scriptCode] to be
        ///    specified.
        public Locale(string _languageCode, string _countryCode = "")
        {
            Debug.Assert(!string.IsNullOrWhiteSpace(_languageCode));
            this._languageCode = _languageCode;
            this._countryCode = _countryCode;
        }

        public Locale(string _languageCode, string _countryCode, string _scriptCode)
        {
            Debug.Assert(!string.IsNullOrWhiteSpace(_languageCode));
            Debug.Assert(!string.IsNullOrWhiteSpace(_countryCode));
            Debug.Assert(!string.IsNullOrWhiteSpace(_scriptCode));
            this._languageCode = _languageCode;
            this._countryCode = _countryCode;
            this.ScriptCode = _scriptCode;
        }

        /// Creates a new Locale object.
        ///
        /// The keyword arguments specify the subtags of the Locale.
        ///
        /// The subtag values are _case sensitive_ and must be valid subtags according
        /// to CLDR supplemental data:
        /// [language](http://unicode.org/cldr/latest/common/validity/language.xml),
        /// [script](http://unicode.org/cldr/latest/common/validity/script.xml) and
        /// [region](http://unicode.org/cldr/latest/common/validity/region.xml) for
        /// each of languageCode, scriptCode and countryCode respectively.
        ///
        /// The [countryCode] subtag is optional. When there is no country subtag,
        /// the parameter should be omitted or passed `null` instead of an empty-string.
        ///
        /// Validity is not checked by default, but some methods may throw away
        /// invalid data.
        public static Locale FromSubtags(string languageCode = "und", string countryCode = null, string scriptCode = null)
        {
            Debug.Assert(languageCode != null);
            Debug.Assert(languageCode != "");
            Debug.Assert(scriptCode != "");
            Debug.Assert(countryCode != "");
            return new Locale(languageCode, countryCode, scriptCode);
        }

        // This map is generated by //flutter/tools/gen_locale.dart
        // Mappings generated for language subtag registry as of 2019-02-27.
        private static readonly Dictionary<string, string> _deprecatedLanguageSubtagMap = new Dictionary<string, string>{
            { "in", "id" }, // Indonesian; deprecated 1989-01-01
            { "iw", "he" }, // Hebrew; deprecated 1989-01-01
            { "ji", "yi" }, // Yiddish; deprecated 1989-01-01
            { "jw", "jv" }, // Javanese; deprecated 2001-08-13
            { "mo", "ro" }, // Moldavian, Moldovan; deprecated 2008-11-22
            { "aam", "aas" }, // Aramanik; deprecated 2015-02-12
            { "adp", "dz" }, // Adap; deprecated 2015-02-12
            { "aue", "ktz" }, // ǂKxʼauǁʼein; deprecated 2015-02-12
            { "ayx", "nun" }, // Ayi (China); deprecated 2011-08-16
            { "bgm", "bcg" }, // Baga Mboteni; deprecated 2016-05-30
            { "bjd", "drl" }, // Bandjigali; deprecated 2012-08-12
            { "ccq", "rki" }, // Chaungtha; deprecated 2012-08-12
            { "cjr", "mom" }, // Chorotega; deprecated 2010-03-11
            { "cka", "cmr" }, // Khumi Awa Chin; deprecated 2012-08-12
            { "cmk", "xch" }, // Chimakum; deprecated 2010-03-11
            { "coy", "pij" }, // Coyaima; deprecated 2016-05-30
            { "cqu", "quh" }, // Chilean Quechua; deprecated 2016-05-30
            { "drh", "khk" }, // Darkhat; deprecated 2010-03-11
            { "drw", "prs" }, // Darwazi; deprecated 2010-03-11
            { "gav", "dev" }, // Gabutamon; deprecated 2010-03-11
            { "gfx", "vaj" }, // Mangetti Dune ǃXung; deprecated 2015-02-12
            { "ggn", "gvr" }, // Eastern Gurung; deprecated 2016-05-30
            { "gti", "nyc" }, // Gbati-ri; deprecated 2015-02-12
            { "guv", "duz" }, // Gey; deprecated 2016-05-30
            { "hrr", "jal" }, // Horuru; deprecated 2012-08-12
            { "ibi", "opa" }, // Ibilo; deprecated 2012-08-12
            { "ilw", "gal" }, // Talur; deprecated 2013-09-10
            { "jeg", "oyb" }, // Jeng; deprecated 2017-02-23
            { "kgc", "tdf" }, // Kasseng; deprecated 2016-05-30
            { "kgh", "kml" }, // Upper Tanudan Kalinga; deprecated 2012-08-12
            { "koj", "kwv" }, // Sara Dunjo; deprecated 2015-02-12
            { "krm", "bmf" }, // Krim; deprecated 2017-02-23
            { "ktr", "dtp" }, // Kota Marudu Tinagas; deprecated 2016-05-30
            { "kvs", "gdj" }, // Kunggara; deprecated 2016-05-30
            { "kwq", "yam" }, // Kwak; deprecated 2015-02-12
            { "kxe", "tvd" }, // Kakihum; deprecated 2015-02-12
            { "kzj", "dtp" }, // Coastal Kadazan; deprecated 2016-05-30
            { "kzt", "dtp" }, // Tambunan Dusun; deprecated 2016-05-30
            { "lii", "raq" }, // Lingkhim; deprecated 2015-02-12
            { "lmm", "rmx" }, // Lamam; deprecated 2014-02-28
            { "meg", "cir" }, // Mea; deprecated 2013-09-10
            { "mst", "mry" }, // Cataelano Mandaya; deprecated 2010-03-11
            { "mwj", "vaj" }, // Maligo; deprecated 2015-02-12
            { "myt", "mry" }, // Sangab Mandaya; deprecated 2010-03-11
            { "nad", "xny" }, // Nijadali; deprecated 2016-05-30
            { "ncp", "kdz" }, // Ndaktup; deprecated 2018-03-08
            { "nnx", "ngv" }, // Ngong; deprecated 2015-02-12
            { "nts", "pij" }, // Natagaimas; deprecated 2016-05-30
            { "oun", "vaj" }, // ǃOǃung; deprecated 2015-02-12
            { "pcr", "adx" }, // Panang; deprecated 2013-09-10
            { "pmc", "huw" }, // Palumata; deprecated 2016-05-30
            { "pmu", "phr" }, // Mirpur Panjabi; deprecated 2015-02-12
            { "ppa", "bfy" }, // Pao; deprecated 2016-05-30
            { "ppr", "lcq" }, // Piru; deprecated 2013-09-10
            { "pry", "prt" }, // Pray 3; deprecated 2016-05-30
            { "puz", "pub" }, // Purum Naga; deprecated 2014-02-28
            { "sca", "hle" }, // Sansu; deprecated 2012-08-12
            { "skk", "oyb" }, // Sok; deprecated 2017-02-23
            { "tdu", "dtp" }, // Tempasuk Dusun; deprecated 2016-05-30
            { "thc", "tpo" }, // Tai Hang Tong; deprecated 2016-05-30
            { "thx", "oyb" }, // The; deprecated 2015-02-12
            { "tie", "ras" }, // Tingal; deprecated 2011-08-16
            { "tkk", "twm" }, // Takpa; deprecated 2011-08-16
            { "tlw", "weo" }, // South Wemale; deprecated 2012-08-12
            { "tmp", "tyj" }, // Tai Mène; deprecated 2016-05-30
            { "tne", "kak" }, // Tinoc Kallahan; deprecated 2016-05-30
            { "tnf", "prs" }, // Tangshewi; deprecated 2010-03-11
            { "tsf", "taj" }, // Southwestern Tamang; deprecated 2015-02-12
            { "uok", "ema" }, // Uokha; deprecated 2015-02-12
            { "xba", "cax" }, // Kamba (Brazil); deprecated 2016-05-30
            { "xia", "acn" }, // Xiandao; deprecated 2013-09-10
            { "xkh", "waw" }, // Karahawyana; deprecated 2016-05-30
            { "xsj", "suj" }, // Subi; deprecated 2015-02-12
            { "ybd", "rki" }, // Yangbye; deprecated 2012-08-12
            { "yma", "lrr" }, // Yamphe; deprecated 2012-08-12
            { "ymt", "mtm" }, // Mator-Taygi-Karagas; deprecated 2015-02-12
            { "yos", "zom" }, // Yos; deprecated 2013-09-10
            { "yuu", "yug" }, // Yugh; deprecated 2014-02-28
        };

        // This map is generated by //flutter/tools/gen_locale.dart
        // Mappings generated for language subtag registry as of 2019-02-27.
        private static readonly Dictionary<string, string> _deprecatedRegionSubtagMap = new Dictionary<string, string>{
            { "BU", "MM" }, // Burma; deprecated 1989-12-05
            { "DD", "DE" }, // German Democratic Republic; deprecated 1990-10-30
            { "FX", "FR" }, // Metropolitan France; deprecated 1997-07-14
            { "TP", "TL" }, // East Timor; deprecated 2002-05-20
            { "YD", "YE" }, // Democratic Yemen; deprecated 1990-08-14
            { "ZR", "CD" }, // Zaire; deprecated 1997-07-14
        };

        public override bool Equals(object other)
        {
            if (Identical(this, other))
                return true;
            if (!(other is Locale))
                return false;
            Locale typedOther = other as Locale;

            return this.LanguageCode == typedOther.LanguageCode
               && this.ScriptCode == typedOther.ScriptCode
               && this.CountryCode == typedOther.CountryCode;
        }

        /// The primary language subtag for the locale.
        ///
        /// This must not be null. It may be 'und', representing 'undefined'.
        ///
        /// This is expected to be string registered in the [IANA Language Subtag
        /// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)
        /// with the type "language". The string specified must match the case of the
        /// string in the registry.
        ///
        /// Language subtags that are deprecated in the registry and have a preferred
        /// code are changed to their preferred code. For example, `const
        /// Locale('he')` and `const Locale('iw')` are equal, and both have the
        /// [languageCode] `he`, because `iw` is a deprecated language subtag that was
        /// replaced by the subtag `he`.
        ///
        /// This must be a valid Unicode Language subtag as listed in [Unicode CLDR
        /// supplemental
        /// data](http://unicode.org/cldr/latest/common/validity/language.xml).
        ///
        /// See also:
        ///
        ///  * [Locale.fromSubtags], which describes the conventions for creating
        ///    [Locale] objects.
        public string LanguageCode => _deprecatedLanguageSubtagMap[_languageCode] ?? _languageCode;

        /// The script subtag for the locale.
        ///
        /// This may be null, indicating that there is no specified script subtag.
        ///
        /// This must be a valid Unicode Language Identifier script subtag as listed
        /// in [Unicode CLDR supplemental
        /// data](http://unicode.org/cldr/latest/common/validity/script.xml).
        ///
        /// See also:
        ///
        ///  * [Locale.fromSubtags], which describes the conventions for creating
        ///    [Locale] objects.
        public string ScriptCode { get; }

        /// The region subtag for the locale.
        ///
        /// This may be null, indicating that there is no specified region subtag.
        ///
        /// This is expected to be string registered in the [IANA Language Subtag
        /// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry)
        /// with the type "region". The string specified must match the case of the
        /// string in the registry.
        ///
        /// Region subtags that are deprecated in the registry and have a preferred
        /// code are changed to their preferred code. For example, `const Locale('de',
        /// 'DE')` and `const Locale('de', 'DD')` are equal, and both have the
        /// [countryCode] `DE`, because `DD` is a deprecated language subtag that was
        /// replaced by the subtag `DE`.
        ///
        /// See also:
        ///
        ///  * [Locale.fromSubtags], which describes the conventions for creating
        ///    [Locale] objects.
        public string CountryCode => _deprecatedRegionSubtagMap[_countryCode] ?? _countryCode;

        public override int GetHashCode()
        {
            return HashValues(this.LanguageCode, this.ScriptCode, this.CountryCode);
        }

        public static Locale cachedLocale;
        public static string cachedLocaleString;

        /// Returns a string representing the locale.
        ///
        /// This identifier happens to be a valid Unicode Locale Identifier using
        /// underscores as separator, however it is intended to be used for debugging
        /// purposes only. For parseable results, use [toLanguageTag] instead.
        public override string ToString()
        {
            return _toLanguageTag("_");
        }

        /// Returns a syntactically valid Unicode BCP47 Locale Identifier.
        ///
        /// Some examples of such identifiers: "en", "es-419", "hi-Deva-IN" and
        /// "zh-Hans-CN". See http://www.unicode.org/reports/tr35/ for technical
        /// details.
        public string ToLanguageTag() => _toLanguageTag();

        private string _toLanguageTag(string separator = "-")
        {
            if (!Identical(cachedLocale, this))
            {
                cachedLocale = this;
                cachedLocaleString = _rawToString(separator);
            }
            return cachedLocaleString;
        }

        private string _rawToString(string separator)
        {
            StringBuilder outBuilder = new StringBuilder(separator);
            if (this.ScriptCode != null)
                outBuilder.Append($"{separator}{this.ScriptCode}");
            if (this._countryCode != null)
                outBuilder.Append($"{separator}{this.CountryCode}");
            return outBuilder.ToString();
        }
    }
}
