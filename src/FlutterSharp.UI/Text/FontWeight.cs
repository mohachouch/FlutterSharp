using System;
using System.Collections.Generic;
using static FlutterSharp.UI.Lerp;
using static FlutterSharp.UI.UITypes;

namespace FlutterSharp.UI
{
    /// The thickness of the glyphs used to draw the text
    public class FontWeight
    {
        public FontWeight(int index)
        {
            this.Index = index;
        }

        /// The encoded integer value of this font weight.
        public readonly int Index;

        /// Thin, the least thick
        public static readonly FontWeight W100 = new FontWeight(0);

        /// Extra-light
        public static readonly FontWeight W200 = new FontWeight(1);

        /// Light
        public static readonly FontWeight W300 = new FontWeight(2);

        /// Normal / regular / plain
        public static readonly FontWeight W400 = new FontWeight(3);

        /// Medium
        public static readonly FontWeight W500 = new FontWeight(4);

        /// Semi-bold
        public static readonly FontWeight W600 = new FontWeight(5);

        /// Bold
        public static readonly FontWeight W700 = new FontWeight(6);

        /// Extra-bold
        public static readonly FontWeight W800 = new FontWeight(7);

        /// Black, the most thick
        public static readonly FontWeight W900 = new FontWeight(8);

        /// The default font weight.
        public static readonly FontWeight Normal = W400;

        /// A commonly used font weight that is heavier than normal.
        public static readonly FontWeight Bold = W700;

        /// A list of all the font weights.
        public static List<FontWeight> Values = new List<FontWeight> { W100, W200, W300, W400, W500, W600, W700, W800, W900 };

        /// Linearly interpolates between two font weights.
        ///
        /// Rather than using fractional weights, the interpolation rounds to the
        /// nearest weight.
        ///
        /// If both `a` and `b` are null, then this method will return null. Otherwise,
        /// any null values for `a` or `b` are interpreted as equivalent to [normal]
        /// (also known as [w400]).
        ///
        /// The `t` argument represents position on the timeline, with 0.0 meaning
        /// that the interpolation has not started, returning `a` (or something
        /// equivalent to `a`), 1.0 meaning that the interpolation has finished,
        /// returning `b` (or something equivalent to `b`), and values in between
        /// meaning that the interpolation is at the relevant point on the timeline
        /// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
        /// 1.0, so negative values and values greater than 1.0 are valid (and can
        /// easily be generated by curves such as [Curves.elasticInOut]). The result
        /// is clamped to the range [w100]–[w900].
        ///
        /// Values for `t` are usually obtained from an [Animation<double>], such as
        /// an [AnimationController].
        public static FontWeight Lerp(FontWeight a, FontWeight b, double t)
        {
            if (a == null && b == null)
                return null;
            return Values[(int)LerpDouble(a?.Index ?? Normal.Index, b?.Index ?? Normal.Index, t).Round().Clamp(0, 8)];
        }

        public override string ToString()
        {
            return new Dictionary<int, String>
            {
                {0, "FontWeight.W100"},
                {1, "FontWeight.W200"},
                {2, "FontWeight.W300"},
                {3, "FontWeight.W400"},
                {4, "FontWeight.W500"},
                {5, "FontWeight.W600"},
                {6, "FontWeight.W700"},
                {7, "FontWeight.W800"},
                {8, "FontWeight.W900"},
            }[this.Index];
        }
    }
}